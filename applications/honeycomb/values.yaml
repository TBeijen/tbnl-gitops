externalSecrets:
  environment: <<specifyEnvironment>>

otel-collector-cluster:
  mode: deployment

  extraEnvs:
    - name: HONEYCOMB_API_KEY
      valueFrom:
        secretKeyRef:
          name: honeycomb
          key: api-key

  # We only want one of these collectors - any more and we'd produce duplicate data
  replicaCount: 1

  presets:
    # enables the k8sclusterreceiver and adds it to the metrics pipelines
    clusterMetrics:
      enabled: true
    # enables the k8sobjectsreceiver to collect events only and adds it to the logs pipelines
    kubernetesEvents:
      enabled: true

  config:
    receivers:
      k8s_cluster:
        collection_interval: 60s
      jaeger: null
      zipkin: null
    processors:
      transform/events:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              # adds a new watch-type attribute from the body if it exists
              - set(attributes["watch-type"], body["type"]) where IsMap(body) and body["type"] != nil

              # create new attributes from the body if the body is an object
              - merge_maps(attributes, body, "upsert") where IsMap(body) and body["object"] == nil
              - merge_maps(attributes, body["object"], "upsert") where IsMap(body) and body["object"] != nil

              # Transform the attributes so that the log events use the k8s.* semantic conventions
              - merge_maps(attributes, attributes[ "metadata"], "upsert") where IsMap(attributes[ "metadata"])
              - set(attributes["k8s.pod.name"], attributes["regarding"]["name"]) where attributes["regarding"]["kind"] == "Pod"
              - set(attributes["k8s.node.name"], attributes["regarding"]["name"]) where attributes["regarding"]["kind"] == "Node"
              - set(attributes["k8s.job.name"], attributes["regarding"]["name"]) where attributes["regarding"]["kind"] == "Job"
              - set(attributes["k8s.cronjob.name"], attributes["regarding"]["name"]) where attributes["regarding"]["kind"] == "CronJob"
              - set(attributes["k8s.namespace.name"], attributes["regarding"]["namespace"]) where attributes["regarding"]["kind"] == "Pod" or attributes["regarding"]["kind"] == "Job" or attributes["regarding"]["kind"] == "CronJob"

              # Transform the type attribtes into OpenTelemetry Severity types.
              - set(severity_text, attributes["type"]) where attributes["type"] == "Normal" or attributes["type"] == "Warning"
              - set(severity_number, SEVERITY_NUMBER_INFO) where attributes["type"] == "Normal"
              - set(severity_number, SEVERITY_NUMBER_WARN) where attributes["type"] == "Warning"

    exporters:
      otlp/k8s-metrics:
        endpoint: "api.honeycomb.io:443" # US instance
        # endpoint: "api.eu1.honeycomb.io:443" # EU instance
        headers:
          "x-honeycomb-team": "${env:HONEYCOMB_API_KEY}"
          "x-honeycomb-dataset": "k8s-metrics"
      otlp/k8s-events:
        endpoint: "api.honeycomb.io:443" # US instance
        # endpoint: "api.eu1.honeycomb.io:443" # EU instance
        headers:
          "x-honeycomb-team": "${env:HONEYCOMB_API_KEY}"
          "x-honeycomb-dataset": "k8s-events"

    service:
      pipelines:
        traces: null
        metrics:
          exporters: [ otlp/k8s-metrics ]
        logs:
          processors: [ memory_limiter, transform/events, batch ]
          exporters: [ otlp/k8s-events ]
          
  ports:
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false

otel-collector:
  mode: daemonset

  # Required to use the kubeletstats cpu/memory utilization metrics
  clusterRole:
    create: true
    rules:
      - apiGroups: 
          - ""
        resources:
          - nodes/proxy
        verbs:
          - get

  extraEnvs:
    - name: HONEYCOMB_API_KEY
      valueFrom:
        secretKeyRef:
          name: honeycomb
          key: api-key

  presets:
    # enables the k8sattributesprocessor and adds it to the traces, metrics, and logs pipelines
    kubernetesAttributes:
      enabled: true
      extractAllPodLabels: true
      extractAllPodAnnotations: true
    # enables the kubeletstatsreceiver and adds it to the metrics pipelines
    kubeletMetrics:
      enabled: true
    # enable log collection, see https://docs.honeycomb.io/integrations/kubernetes/log-collection/
    logsCollection:
      enabled: true      

  config:
    receivers:
      jaeger: null
      zipkin: null
      kubeletstats:
        collection_interval: 60s
        metric_groups:
          - node
          - pod
        metrics:
          k8s.node.uptime:
            enabled: true
          k8s.pod.uptime:
            enabled: true
          k8s.pod.cpu_limit_utilization:
            enabled: true
          k8s.pod.cpu_request_utilization:
            enabled: true
          k8s.pod.memory_limit_utilization:
            enabled: true
          k8s.pod.memory_request_utilization:
            enabled: true

    exporters:
      otlp:
        endpoint: "api.honeycomb.io:443" # US instance
        #endpoint: "api.eu1.honeycomb.io:443" # EU instance
        headers:
          "x-honeycomb-team": "${env:HONEYCOMB_API_KEY}"
      otlp/k8s-metrics:
        endpoint: "api.honeycomb.io:443" # US instance
        # endpoint: "api.eu1.honeycomb.io:443" # EU instance
        headers:
          "x-honeycomb-team": "${env:HONEYCOMB_API_KEY}"
          "x-honeycomb-dataset": "k8s-metrics"
      otlp/k8s-logs:
        endpoint: "api.honeycomb.io:443" # US instance
        # endpoint: "api.eu1.honeycomb.io:443" # EU instance
        headers:
          "x-honeycomb-team": "${env:HONEYCOMB_API_KEY}"
          "x-honeycomb-dataset": "k8s-logs"

    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [otlp]
        metrics:
          exporters: [otlp/k8s-metrics]
        logs:
          exporters: [otlp/k8s-logs]

  ports:
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
